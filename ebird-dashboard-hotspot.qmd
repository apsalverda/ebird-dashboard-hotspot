---
title: "eBird User Dashboard"
#author: "Anne Pier Salverda"
format: 
  dashboard:
    orientation: columns
    theme: cosmo
    css: style.css
    nav-buttons:
      - icon: envelope-at-fill
        href: mailto:salverda@yahoo.com?subject=Your eBird dashboard
        target: _blank
      - icon: linkedin
        href: https://www.linkedin.com/in/anne-pier-salverda-37ab7042/
        target: _blank
      - icon: mortarboard-fill
        href: https://scholar.google.com/citations?user=dnlnAJQAAAAJ
        target: _blank
      - icon: github
        href: https://github.com/apsalverda/ebird-dashboard-hotspot
        target: _blank
    sidebar:
      style: "docked"
      background: "light"
      collapse: false
server: shiny
---

```{r setup}
#| include: false
library(tidyverse)
library(ggplot2)
library(gt)
library(plotly)
library(shiny)
library(bslib)
library(bsicons)
library(leaflet)
library(ggiraph)
library(formattable)

original_ebird_green = "#2F7742"
ebird_green = "#70c687"
ebird_yellow = "#FFD800"
ebird_red = "#DA1C13"
light_gray = "#E5E5E5"
spring_color = "#70c687"
summer_color = "#FFD800"
fall_color = "#FF9900"
winter_color = "#56B3FA"

source("helper-functions.R", local = TRUE)
```

```{r}
#| context: server

react_delay = 1

change_slider = reactiveVal(Sys.time())
change_daterange = reactiveVal(Sys.time())
reactive_hotspot_values = reactiveVal(list(NULL))
earliest_date = reactiveVal()
latest_date = reactiveVal()
n_rows_data = reactiveVal()
n_checklists = reactiveVal()
n_species = reactiveVal()
testje = reactiveVal(0)
import_counter = reactiveVal(0)
hotspot_latitude = reactiveVal(0)
hotspot_longitude = reactiveVal(0)
hotspot_name = reactiveVal("")

ebird_dat = reactiveVal({
  read_ebird_data()
})

imported_dat = reactive({
  req(input$upload)
  imported_dat = read_ebird_data(input$upload$datapath)
})

observeEvent(input$upload, {
  # triggered in response to the user uploading a file
  import_counter(import_counter() + 1)
  imported_dat = read_ebird_data(input$upload$datapath)
  ebird_dat(imported_dat)
  earliest_date(min(imported_dat$date))
  latest_date(max(imported_dat$date))
  updateSliderInput(
    session,
    "date_range_slider",
    min = earliest_date(),
    max = latest_date(),
    value = c(earliest_date(), latest_date()),
    timeFormat = "%b %Y"
  )
  # NOTE: the data range input object gets updated automatically
  # updateDateRangeInput(
  #   session,
  #   "date_range",
  #   start = earliest_date(),
  #   end = latest_date(),
  #   min = earliest_date(),
  #   max = latest_date()
  # )
  n_rows_data(nrow(imported_dat))
  n_checklists(
    imported_dat %>%
      #        filter(protocol != "eBird - Casual Observation") %>%
      distinct(submission_id) %>%
      nrow()
  )
  n_species(
    imported_dat %>% 
      #        filter(protocol != "eBird - Casual Observation") %>%
      distinct(common_name) %>%
      nrow())
})

selected_dat = reactive({
  req(input$hotspot)
  if (input$hotspot == "All"){
    # user has selected all hotspots
    my_selected_dat = ebird_dat()
  } else {
    # user has selected a hotspot
    my_selected_dat = 
      ebird_dat() %>% 
      filter(
        location == input$hotspot
      )
  }
  earliest_date(min(my_selected_dat$date))
  latest_date(max(my_selected_dat$date))
  #  n_rows_data(nrow(selected_dat))
  #  n_checklists(selected_dat %>% distinct(submission_id) %>% nrow())
  my_selected_dat = my_selected_dat %>%
    filter(
      date >= input$date_range[1],
      date <= input$date_range[2]
    )
  top_lat_lng =
    my_selected_dat %>%
    distinct(location, latitude, longitude)
  hotspot_latitude(top_lat_lng$latitude)
  hotspot_longitude(top_lat_lng$longitude)
  hotspot_name(top_lat_lng$location)
  return(my_selected_dat)
})

total_species = reactive({
  selected_dat() %>% distinct(common_name) %>% nrow()
})
output$total_species_text = renderText({
  total_species()
}
)

total_checklists = reactive({
  selected_dat() %>% 
    #    filter(protocol != "eBird - Casual Observation") %>%
    distinct(submission_id) %>%
    nrow()
})
output$total_checklists_text = renderText({
  total_checklists()
}
)

total_time = reactive({
  selected_dat() %>% 
    distinct(submission_id, duration_min) %>% 
    filter(!is.na(duration_min)) %>%
    summarize(total_time_hours = sum(duration_min) / 60) %>% 
    pull(total_time_hours) %>% 
    round(1)
})

total_observations = reactive({
  selected_dat() %>%
    nrow()
})

output$total_time_text = renderText({
  total_time()
  #  paste(total_time(), " hours")
}
)

last_trip = reactive({
  max_date = max(selected_dat()$date)
  paste(
    month(max_date, label = TRUE),
    " ",
    mday(max_date),
    ", ",
    year(max_date)
  )
})
output$last_trip_text = renderText({
  last_trip()
}
)

output$total_observations_text = renderText({
  total_observations()
})

max_checklist = reactive({
  selected_dat() %>% 
    count(submission_id) %>%
    arrange(desc(n)) %>% 
    slice(1) %>% 
    pull(n)
})

output$max_checklist_text = renderText({
  max_checklist()
})

# output$imported_data_text = renderText({
#   paste0(
#     "Imported ",
#     imported_dat() %>% nrow(),
#     " rows of data."
#   )
# })

output$imported_data_statistics = renderText({
  ifelse(
    is.null(input$upload$name),
    "",
    paste0(
      "\nImported: \n ",
      n_rows_data(),
      " observations\n ",
      n_checklists(),
      " checklists\n ",
      n_species(),
      " species"
    )
  )
})

output$import_filename = renderText({
  paste0(
    ifelse(
      is.null(input$upload$name),
      "",
      paste0(
        input$upload$name
      )
    )
  )
})

output$species_count_plot = renderGirafe({
  plot = 
    selected_dat() %>% 
    count(submission_id, date, us_season) %>% 
    mutate(
      my_label = paste(
        n,
        "species on ", 
        ordinal_date_suffix(date)
      )
    ) %>% 
    ggplot(aes(x = date, y = n, color = us_season)) + 
    geom_point_interactive(
      #      position = ggbeeswarm::position_quasirandom(width = 1),
      shape = 16,
      aes(
        tooltip = my_label,
        data_id = submission_id,
        tooltip_fill = date,
        onclick = sprintf("window.open(\"https://ebird.org/checklist/%s\")", submission_id)
      )
    ) +
    scale_x_date() +
    scale_y_continuous(
#      expand = expansion(add = c(1, 1)),
      limits = c(0, NA),
      breaks = ~unique(round(pretty(.)))
      ) +
        labs(
#      title = "Total species reported by checklist",
      subtitle = "Click on a data point to open the checklist in eBird.",
      x = "",
      y = "Total species reported"
    ) +
    theme_gray(base_size = 14) +
    theme(
      panel.grid = element_blank(),
      panel.background = element_blank(),
      axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
      plot.subtitle = element_text(
        color = "#707070",
        size = 10,
        margin = margin(t = 0, r = 0, b = 15, l = 0)
        )
    )
  if(input$season_coloring =="None"){
    plot = 
      plot +
      scale_color_manual(
        # 636363
        values = c("#707070", "#707070", "#707070", "#707070"),
        guide = "none"
      )
  } else {
    if(input$season_coloring =="Southern hemisphere"){
      plot = 
        plot +
        scale_color_manual(
          values = c("spring" = fall_color, "summer" = winter_color, "fall" = spring_color, "winter" = summer_color),
          guide = "none"
        )
    } else {
      plot = 
        plot +
        scale_color_manual(
          values = c("spring" = spring_color, "summer" = summer_color, "winter" = winter_color, "fall" = fall_color),
          guide = "none"
        )
    }
  }
  # avoid fractions on the Y axis
  # y_axis_breaks = layer_scales(plot)$y$break_positions()
  # y_axis_breaks = y_axis_breaks[!is.na(y_axis_breaks)]
  # if (length(y_axis_breaks[y_axis_breaks != round(y_axis_breaks)]) > 0){
  #   y_axis_breaks = y_axis_breaks[y_axis_breaks == round(y_axis_breaks)]
  #   plot = 
  #     plot +
  #     scale_y_continuous(breaks = y_axis_breaks)
  # }
  girafe(
    ggobj = plot, 
    pointsize = 60,
    width_svg = (0.98 * (input$pltChange$width - 300) / input$pltChange$dpi),
    height_svg = (0.88 * (input$pltChange$height - 95 - 80) / input$pltChange$dpi)
    # width_svg = (0.98 * (input$pltChange$width - 300) / input$pltChange$dpi),
    # height_svg = (0.75 * (input$pltChange$height - 100) / input$pltChange$dpi)
  ) %>% 
    girafe_options(
      opts_sizing(rescale = FALSE),
      opts_toolbar(
        fixed = TRUE,
        pngname = "ebird-dashboard.png",
        hidden = c("selection", "saveaspng")
      ),
      opts_tooltip(
        use_fill = TRUE,
        opacity = .7,
        offx = 10,
        offy = 0
        #    css = "color:blue; background-color:red, fill-opacity:.5;"
        #    tooltip_fill = "white"
      ),
      #  opts_hover(css = "stroke:yellow;stroke-width:3px;fill-opacity:0.8;")
      opts_hover(
        css = "stroke:black; stroke-width:1px;"
      )
    )
})

output$data_preview = DT::renderDT({
  selected_dat() %>%
    # mutate(
    #   checklist = ifelse(
    #     protocol == "eBird - Traveling Count",
    #     submission_id,
    #     NA
    #   )
    # ) %>%
    mutate(n_checklists = n_distinct(submission_id, na.rm = TRUE)) %>%
    group_by(common_name) %>%
    summarize(
      first_seen = min(date),
      last_seen = max(date),
      perc_checklists = (100 * (n() / max(n_checklists))) %>% round(1)
    ) %>%
    mutate(
      perc_checklists = my_color_bar()(perc_checklists)
    ) %>% 
    arrange(desc(perc_checklists)) %>% 
    rename(
      "species" = common_name,
      "first" = first_seen,
      "last" = last_seen,
      "% checklists" = perc_checklists
    ) %>%
    #     mutate(
    #       # used to display scrollable height, for trouble shooting
    #       height = input$pltChange$height,
    #       scrolly = paste0(0.65 * (input$pltChange$height - 95 - 80), "px")
    # ) %>%
    formattable() %>% 
    as.datatable(
      rownames = FALSE,
      options = list(
        dom = "ft",
        scrollY = ((input$pltChange$height - 122) * .88) - 148,
        #        scrollY = paste0(0.65 * (input$pltChange$height - 95 - 80), "px"),
        pageLength = 10000
      )
    )
})

output$hotspot_map = renderLeaflet({
  leaflet() %>%
    addTiles(
      urlTemplate = "https://mts1.google.com/vt/lyrs=s&hl=en&src=app&x={x}&y={y}&z={z}&s=G",
      attribution = "Google"
    ) %>%
    addMarkers(
      lng = hotspot_longitude(), 
      lat = hotspot_latitude(), 
      popup = hotspot_name()
      # lng = top_location_info$longitude, 
      # lat = top_location_info$latitude, 
      # popup = top_location_info$location
    )
}
)

# observeEvent(import_counter(), {
#   testje(testje() + 1)
# })

observeEvent(c(earliest_date(), latest_date()), {
  testje(testje() + 1)
  updateSliderInput(
    session,
    "date_range_slider",
    min = earliest_date(),
    max = latest_date(),
    value = c(earliest_date(), latest_date()),
    timeFormat = "%b %Y"
  )
}
)

observeEvent(c(input$date_range_slider, input$ebird_dat, input$selected_dat), {
  if (difftime(Sys.time(), change_slider()) > react_delay) {
    change_daterange(Sys.time())
    updateDateRangeInput(
      session,
      "date_range",
      start = input$date_range_slider[[1]],
      end = input$date_range_slider[[2]]
    )
  }
}
)
observeEvent(c(input$date_range, input$ebird_dat, input$selected_dat), {
  if (difftime(Sys.time(), change_daterange()) > react_delay) {
    change_slider(Sys.time())
    updateSliderInput(
      session,
      "date_range_slider",
      value = c(input$date_range[[1]],
                input$date_range[[2]]),
      timeFormat = "%b %Y"
    )
  }
})

observeEvent(
  c(input$hotspot_sorting, input$upload),
  { 
    if (input$hotspot_sorting == "Alphabetically"){
      hotspot_list = 
        ebird_dat() %>% 
        distinct(location) %>% 
        arrange(location)
      if (any(str_detect(hotspot_list$location, "^[0-9]"))){
      }
      # move hotspots whose name starts with a number to the bottom of the list
      # these names tend to be very long
      hotspot_list = 
        bind_rows(
          hotspot_list %>% 
            filter(!str_detect(location, "^[0-9]")),
          hotspot_list %>% 
            filter(str_detect(location, "^[0-9]"))
        )
      hotspot_list = c("All", hotspot_list %>% pull())
    } else
    {
      # arrange by Number of checklists reported
      hotspot_list =
        ebird_dat() %>%
        distinct(location, submission_id) %>% 
        count(location, sort = TRUE) %>%
        pull(location)
      hotspot_list = c("All", hotspot_list)
    }
    reactive_hotspot_values(hotspot_list)
    earliest_date(min(ebird_dat()$date))
    latest_date(max(ebird_dat()$date))
    updateSelectInput(
      session,
      "hotspot",
      choices = reactive_hotspot_values(),
      selected = NULL
    )
    updateSliderInput(
      session,
      "date_range_slider",
      min = earliest_date(),
      max = latest_date(),
      value = c(earliest_date(), latest_date()),
      timeFormat = "%b %Y"
    )
    updateDateRangeInput(
      session,
      "date_range",
      start = earliest_date(),
      end = latest_date(),
      min = earliest_date(),
      max = latest_date()
    )
  })

# for trouble shooting
output$testje = renderText({
  paste0(
    "testje: ", testje(), 
    "\nearliest date: ", earliest_date(),
    "\nlatest date: ", latest_date(),
    "\nimport counter: ", import_counter()
  )}
)
# output$width = renderText({paste0("width: ", input$pltChange$width)})
# output$height = renderText({paste0("height: ", input$pltChange$height)})
```

## Sidebar {.sidebar width=225}

```{r}
#| title: "Filters"
# for troubleshooting
# verbatimTextOutput("width")
# verbatimTextOutput("height")

tags$style(type = "text/css", HTML(
  ".irs-bar { display: none }",
  ".irs-bar-edge { display: none }",
  ".irs-single { color: black; background: transparent }",
  ".irs-from { color: black; background: transparent }",
  ".irs-to { color: black; background: transparent }",
  ".js-irs-0 .irs-slider { background: #007FA3; width: 12px; height: 12px; top: 23px }",
  ".js-irs-0 .irs-slider:hover { background: #007FA3; width: 12px; height: 12px; top: 23px }"))

# for troubleshooting
#verbatimTextOutput("testje")

#p(bs_icon("feather"))

div(
  # top margin to accommodate sidebar close symbol
  style = "margin-bottom: 15px; margin-top: 20px",
  leafletOutput(
    "hotspot_map",
    height = "200", 
    width = "200"
  )
)

selectInput(
  "hotspot", 
  "Hotspot",
  choices = NULL,
  selected = NULL
)

selectInput(
  "hotspot_sorting", 
  "Hotspot list sorting",
  choices = list("Alphabetically", "Number of checklists"),
  selected = "Number of checklists"
)

selectInput(
  "season_coloring", 
  "Season colors",
  choices = list("Northern hemisphere", "Southern hemisphere", "None"),
  selected = "Northern hemisphere"
)

div(
  style = "display: inline-block; padding-top: 0px; margin-top: 0px; margin-left: 15px; margin-right: 15px; font-size: 15px; width: 165px",
  div(style = "display: none;", "Slider"),
  sliderInput(
    "date_range_slider",
    "",
    min = Sys.Date() - 90,
    max = Sys.Date(),
    value =  c(Sys.Date() - 30, Sys.Date()),
    step = 30,
    ticks = FALSE,
    timeFormat = "%b %Y"
  )
)

div(
  tags$style(".form-control, .input-group-addon {padding: 0px 0px 0px 0px !important;}"),
  style = "display: inline-block; padding-top: 0px; margin-bottom: 0px; margin-top: -20px",
  dateRangeInput(
    "date_range", 
    "",
    start  = "2001-01-01",
    end    = "2010-12-31",
    min    = "2001-01-01",
    max    = "2012-12-21",
    format = "mm/dd/yy",
    weekstart = 1,
    separator = "to",
    startview = "month"
  )
)

div(
  style = "margin-top: 15px",
  "1. ",
  a(
    "Download",
    href = "https://ebird.org/downloadMyData",
    target="_blank"
  ),
  " personal eBird data"
)

tags$div(
  style = "margin-bottom: -10px; /* Adjust this value as needed */",
  fileInput(
    "upload",
    "2. Import downloaded eBird data",
    accept = ".csv",
    buttonLabel = "Import...",
    multiple = FALSE,
    placeholder = "",
    width = "100%"
  )
)
#verbatimTextOutput("import_filename")
verbatimTextOutput("imported_data_statistics")

#hr()
```

# Hotspot {orientation="rows"}

## Value boxes {height=12%}

```{r}
#tags$body(tags$style(HTML('.bslib-value-box .value-box-title {font-size: 0.5rem;}')))
box1 = value_box(
  title = "Species",
  value = textOutput("total_species_text"),
#  showcase = bs_icon("feather"),
  theme = "primary",
  #  style = 'background-color: #5092D0!important;')
  style = "font-size: 50px;")
box2 = value_box(
  title = "Checklists",
  value = textOutput("total_checklists_text"),
  #  showcase = bs_icon("list-check"),
  theme = "primary"
)
box3 = value_box(
  title = "Max checklist",
  value = textOutput("max_checklist_text"),
  #  showcase = bs_icon("trophy"),
  # theme = value_box_theme(bg = original_ebird_green, fg = "white")
  theme = "primary"
)

box4 = value_box(
  title = "Hours",
  value = textOutput("total_time_text"),
  #  showcase = bs_icon("stopwatch"),
  theme = "primary"
)
box5 = value_box(
  title = "Observations",
  value = textOutput("total_observations_text"),
  theme = "primary"
)
layout_column_wrap(
  width = 1/5,
  gap = "3px",
  heights_equal = "all",
  box1, box2, box3, box4, box5
)

# layout_columns(
#   col_widths = c(3, 3, 3, 3),
#   box1,
#   box2,
#   box3,
#   box4
# )
# value_boxes = list(
#   value_box(
#     title = "Species",
#     value = textOutput("total_species_text"),
#     showcase = bs_icon("feather"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Checklists",
#     value = textOutput("total_checklists_text"),
#     showcase = bs_icon("list-check"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Hours",
#     value = textOutput("total_time_text"),
#     showcase = bs_icon("stopwatch"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Last Trip",
#     value = textOutput("last_trip_text", container = h4),
#     showcase = bs_icon("calendar-event"),
#     theme = "success",
#     full_screen = FALSE
# #    style = "height: 100px; resize: both"
#   )
# )
# layout_column_wrap(
# #  height = "150px",
#   width_default = "100%",
#   width = c("25%", "25%", "25%", "25%"),
#   !!!value_boxes
# )
```

## Tabs {height=88%, .tabset expandable=false overflow=hidden}

```{r}
#| title: "Checklists"
# https://stackoverflow.com/questions/65267602/can-a-ggiraph-interactive-plot-be-the-size-of-the-window-in-r-shiny
#p("Click on a data point to open the checklist in eBird")
tags$body(tags$div(id="ppitest", style="width:1in;visible:hidden;padding:0px"))
tags$script('$(document).on("shiny:connected", function(e) {
                                    var w = window.innerWidth;
                                    var h = window.innerHeight;
                                    var d =  document.getElementById("ppitest").offsetWidth;
                                    var obj = {width: w, height: h, dpi: d};
                                    Shiny.onInputChange("pltChange", obj);
                                });
                                $(window).resize(function(e) {
                                    var w = $(this).width();
                                    var h = $(this).height();
                                    var d =  document.getElementById("ppitest").offsetWidth;
                                    var obj = {width: w, height: h, dpi: d};
                                    Shiny.onInputChange("pltChange", obj);
                                });
                            ')
tags$script(HTML("
$(document).on('shown.bs.tab', 'a[data-toggle=\"tab\"]', function (e) {
    var w = $(window).width();
    var h = $(window).height();
    var d = document.getElementById(\"ppitest\").offsetWidth;
    var obj = {width: w, height: h, dpi: d};
    Shiny.onInputChange(\"pltChange\", obj);
});
"))
girafeOutput("species_count_plot")
```

```{r}
#| title: "Species"
div(
  DT::DTOutput("data_preview")
)
```
