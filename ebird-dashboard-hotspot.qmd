---
title: "eBird Hotspot Dashboard"
author: "Anne Pier Salverda"
format: 
  dashboard:
    orientation: columns
    theme: cosmo
    css: styles.css
    scrolling: true
    sidebar:
      style: "docked"
      background: "light"
      collapse-level: 1
      width: 250px
      align: left
      tools:
        - icon: sliders
          menu:
            - text: "Settings"
              icon: gear
            - text: "Profile"
              icon: person
        - icon: question-circle
          href: "#"
server: shiny
---

```{r setup}
#| include: false
library(tidyverse)
library(ggplot2)
library(gt)
library(bslib)
library(plotly)
library(shiny)
library(bslib)
library(bsicons)
library(leaflet)

# read ebird data
ebird_csv = read_csv(
  "MyEBirdData.csv",
  col_types = cols(
    `Submission ID` = col_character(),
    `Common Name` = col_character(),
    `Scientific Name` = col_character(),
    `Taxonomic Order` = col_double(),
    Count = col_character(), #!
    `State/Province` = col_character(),
    County = col_character(),
    `Location ID` = col_character(),
    Location = col_character(),
    Latitude = col_double(),
    Longitude = col_double(),
    Date = col_date(format = ""),
    Time = col_time(format = ""),
    Protocol = col_character(),
    `Duration (Min)` = col_double(),
    `All Obs Reported` = col_double(),
    `Distance Traveled (km)` = col_double(),
    `Area Covered (ha)` = col_logical(),
    `Number of Observers` = col_double(),
    `Breeding Code` = col_character(),
    `Observation Details` = col_character(),
    `Checklist Comments` = col_character(),
    `ML Catalog Numbers` = col_character()
  ),
  na = c("")
)
# NOTE: parsing issues can be ignored; are due to empty values not being
#       included in the data when they occur on the "right end":
#       problems(ebird_csv) %>%
#       count(expected, actual)

# reorganize and reformat data
dat =
  ebird_csv %>%
  janitor::clean_names() %>%
  select(submission_id, date, everything()) %>%
  arrange(date, time) %>%
  mutate(
    year = factor(year(date)),
    month = month(date),
    day_of_year = yday(date),
    us_season = case_when(
      month < 3 | month == 12~ "winter",
      month < 6 ~ "spring",
      month < 9 ~ "summer",
      month < 12 ~ "fall",
      TRUE ~ NA
    ),
    us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
    month = factor(month(date, label = TRUE)),
    # convert "X" to -1 so count can be stored as an integer
    count = as.numeric(ifelse(count == "X", "-1", count))
  )
earliest_date = min(ebird_csv$Date)
latest_date = max(ebird_csv$Date)
#total_species = nrow(dat %>% distinct(common_name))
total_checklists = nrow(dat %>% distinct(submission_id))
hotspot_values =
  dat %>% 
  distinct(location, submission_id) %>% 
  count(location, sort = TRUE) %>%
  pull(location)
```

```{r}
#| context: server
ss <- reactive(input[["hotspot"]])

output$ss <- renderText({
  ss()
})

#default_dat = reactiveVal({})
default_dat = reactiveVal({
  read_csv("MyEBirdData.csv",
           col_types = cols(
             `Submission ID` = col_character(),
             `Common Name` = col_character(),
             `Scientific Name` = col_character(),
             `Taxonomic Order` = col_double(),
             Count = col_character(), #!
             `State/Province` = col_character(),
             County = col_character(),
             `Location ID` = col_character(),
             Location = col_character(),
             Latitude = col_double(),
             Longitude = col_double(),
             Date = col_date(format = ""),
             Time = col_time(format = ""),
             Protocol = col_character(),
             `Duration (Min)` = col_double(),
             `All Obs Reported` = col_double(),
             `Distance Traveled (km)` = col_double(),
             `Area Covered (ha)` = col_logical(),
             `Number of Observers` = col_double(),
             `Breeding Code` = col_character(),
             `Observation Details` = col_character(),
             `Checklist Comments` = col_character(),
             `ML Catalog Numbers` = col_character()
           ),
           na = c("")
  ) %>% 
    janitor::clean_names() %>%
    select(submission_id, date, everything()) %>%
    arrange(date, time) %>%
    mutate(
      year = factor(year(date)),
      month = month(date),
      day_of_year = yday(date),
      us_season = case_when(
        month < 3 | month == 12~ "winter",
        month < 6 ~ "spring",
        month < 9 ~ "summer",
        month < 12 ~ "fall",
        TRUE ~ NA
      ),
      us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
      month = factor(month(date, label = TRUE)),
      # convert "X" to -1 so count can be stored as an integer
      count = as.numeric(ifelse(count == "X", "-1", count))
    )
})

imported_dat = reactive({
  req(input$upload)
  # if (is.null(input$upload)){
  #   imported_dat =
  #     read_csv("MyEBirdData.csv",
  #              col_types = cols(
  #                `Submission ID` = col_character(),
  #                `Common Name` = col_character(),
  #                `Scientific Name` = col_character(),
  #                `Taxonomic Order` = col_double(),
  #                Count = col_character(), #!
  #                `State/Province` = col_character(),
  #                County = col_character(),
  #                `Location ID` = col_character(),
  #                Location = col_character(),
  #                Latitude = col_double(),
  #                Longitude = col_double(),
  #                Date = col_date(format = ""),
  #                Time = col_time(format = ""),
  #                Protocol = col_character(),
  #                `Duration (Min)` = col_double(),
  #                `All Obs Reported` = col_double(),
  #                `Distance Traveled (km)` = col_double(),
  #                `Area Covered (ha)` = col_logical(),
  #                `Number of Observers` = col_double(),
  #                `Breeding Code` = col_character(),
  #                `Observation Details` = col_character(),
  #                `Checklist Comments` = col_character(),
  #                `ML Catalog Numbers` = col_character()
  #              ),
  #              na = c("")
  #     )
  # } else {
    imported_dat =
      read_csv(input$upload$datapath,
               col_types = cols(
                 `Submission ID` = col_character(),
                 `Common Name` = col_character(),
                 `Scientific Name` = col_character(),
                 `Taxonomic Order` = col_double(),
                 Count = col_character(), #!
                 `State/Province` = col_character(),
                 County = col_character(),
                 `Location ID` = col_character(),
                 Location = col_character(),
                 Latitude = col_double(),
                 Longitude = col_double(),
                 Date = col_date(format = ""),
                 Time = col_time(format = ""),
                 Protocol = col_character(),
                 `Duration (Min)` = col_double(),
                 `All Obs Reported` = col_double(),
                 `Distance Traveled (km)` = col_double(),
                 `Area Covered (ha)` = col_logical(),
                 `Number of Observers` = col_double(),
                 `Breeding Code` = col_character(),
                 `Observation Details` = col_character(),
                 `Checklist Comments` = col_character(),
                 `ML Catalog Numbers` = col_character()
               ),
               na = c("")
      ) %>% 
    janitor::clean_names() %>%
    select(submission_id, date, everything()) %>%
    arrange(date, time) %>%
    mutate(
      year = factor(year(date)),
      month = month(date),
      day_of_year = yday(date),
      us_season = case_when(
        month < 3 | month == 12~ "winter",
        month < 6 ~ "spring",
        month < 9 ~ "summer",
        month < 12 ~ "fall",
        TRUE ~ NA
      ),
      us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
      month = factor(month(date, label = TRUE)),
      # convert "X" to -1 so count can be stored as an integer
      count = as.numeric(ifelse(count == "X", "-1", count))
    )
})

observe({
  # triggered in response to the user uploading a file
  if (!is.null(input$upload)) {
    imported_dat =
      read_csv(input$upload$datapath,
               col_types = cols(
                 `Submission ID` = col_character(),
                 `Common Name` = col_character(),
                 `Scientific Name` = col_character(),
                 `Taxonomic Order` = col_double(),
                 Count = col_character(), #!
                 `State/Province` = col_character(),
                 County = col_character(),
                 `Location ID` = col_character(),
                 Location = col_character(),
                 Latitude = col_double(),
                 Longitude = col_double(),
                 Date = col_date(format = ""),
                 Time = col_time(format = ""),
                 Protocol = col_character(),
                 `Duration (Min)` = col_double(),
                 `All Obs Reported` = col_double(),
                 `Distance Traveled (km)` = col_double(),
                 `Area Covered (ha)` = col_logical(),
                 `Number of Observers` = col_double(),
                 `Breeding Code` = col_character(),
                 `Observation Details` = col_character(),
                 `Checklist Comments` = col_character(),
                 `ML Catalog Numbers` = col_character()
               ),
               na = c("")
      ) %>% 
      janitor::clean_names() %>%
      select(submission_id, date, everything()) %>%
      arrange(date, time) %>%
      mutate(
        year = factor(year(date)),
        month = month(date),
        day_of_year = yday(date),
        us_season = case_when(
          month < 3 | month == 12~ "winter",
          month < 6 ~ "spring",
          month < 9 ~ "summer",
          month < 12 ~ "fall",
          TRUE ~ NA
        ),
        us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
        month = factor(month(date, label = TRUE)),
        # convert "X" to -1 so count can be stored as an integer
        count = as.numeric(ifelse(count == "X", "-1", count))
      )
    default_dat(imported_dat)
  }
})

selected_dat = reactive({
  req(input$hotspot)
  selected_dat = default_dat() %>% filter(location == input$hotspot)
  return(selected_dat)
})

total_species = reactive({
  selected_dat() %>% distinct(common_name) %>% nrow()
})
output$total_species_text = renderText({
  total_species()
}
)

total_checklists = reactive({
  selected_dat() %>% distinct(submission_id) %>% nrow()
})
output$total_checklists_text = renderText({
  total_checklists()
}
)

total_time = reactive({
  selected_dat() %>% 
    distinct(submission_id, duration_min) %>% 
    filter(!is.na(duration_min)) %>%
    summarize(total_time_hours = sum(duration_min) / 60) %>% 
    pull(total_time_hours) %>% 
    round(1)
})
output$total_time_text = renderText({
  paste(total_time(), " hours")
}
)

last_trip = reactive({
  max_date = max(selected_dat()$date)
  paste(
    month(max_date, label = TRUE),
    " ",
    mday(max_date),
    ", ",
    year(max_date)
  )
})
output$last_trip_text = renderText({
  last_trip()
}
)

output$imported_data_text = renderText({
  imported_dat() %>% nrow()
})

output$data_preview <- DT::renderDataTable({
  DT::datatable(
    selected_dat() %>% 
      select(
        date,
        common_name,
        count,
        #        protocol,
        us_season
      ),
    options = list(
      pageLength = 10,
      scrollX = TRUE,
      autoWidth = TRUE
    ),
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: center; font-size: 16px; font-weight: bold;',
      paste('Data from', input$dataset, 'filtered by', input$column, '=', input$filter_value)
    )
  )
})

output$hotspot_map = renderLeaflet({
  top_location_info =
    selected_dat() %>% 
    distinct(location, latitude, longitude)
  leaflet() %>%
    addTiles(
      urlTemplate = "https://mts1.google.com/vt/lyrs=s&hl=en&src=app&x={x}&y={y}&z={z}&s=G",
      attribution = "Google"
    ) %>%
    # addControl(position = "topright") %>% 
    # addTiles() %>%  # Add default OpenStreetMap map tiles
    addMarkers(
      lng = top_location_info$longitude, 
      lat = top_location_info$latitude, 
      popup = top_location_info$location
    )
})

observeEvent(input$dataset, {
  if (input$dataset == "alphabetically"){
    hotspot_list = 
      dat %>% 
      distinct(location) %>% 
      arrange(location)
    if (any(str_detect(hotspot_list$location, "^[0-9]"))){
    }
    # move hotspots whose name starts with a number to the bottom of the list
    # these names tend to be very long
    hotspot_list = 
      bind_rows(
        hotspot_list %>% 
          filter(!str_detect(location, "^[0-9]")),
        hotspot_list %>% 
          filter(str_detect(location, "^[0-9]"))
      )
    hotspot_list = hotspot_list %>% pull()
  } else
  {
    hotspot_list =
      dat %>%
      distinct(location, submission_id) %>% 
      count(location, sort = TRUE) %>%
      pull(location)
  }
  
  updateSelectInput(
    session,
    "hotspot",
    choices = hotspot_list,
    selected = hotspot_list[1]
  )
})


```

# Sidebar {.sidebar}

```{r}
#| title: "Filters"

selectInput(
  "dataset", 
  "Hot spot sorting:",
  choices = list("checklist count", "alphabetically")
)

selectInput(
  "hotspot", 
  "Select a hotspot:",
  choices = hotspot_values,
  selected = hotspot_values[1]
)

sliderInput("dateRange", "Date Range:",
            min = earliest_date,
            max = latest_date,
            value = c(earliest_date, latest_date),
            timeFormat = "%b %Y")

# selectInput("category", "Category:",
#             c("All Categories" = "all",
#               "Category A" = "a",
#               "Category B" = "b",
#               "Category C" = "c"))
# 
# checkboxGroupInput("metrics", "Metrics to Display:",
#                    c("Value 1" = "value1",
#                      "Value 2" = "value2",
#                      "Value 3" = "value3"),
#                    selected = c("value1", "value2", "value3"))

# actionButton("updateBtn", "Update Dashboard", 
#              class = "btn-primary w-100 mb-3")

hr()

fileInput(
  "upload",
  "Import eBird data",
  accept = ".csv",
  multiple = FALSE
)

textOutput("imported_data_text")
# div(
#   h4("Dashboard Info"),
#   p("Last updated: March 19, 2025")
# )
```

# Main content {orientation="rows"}

## Row {height=10%}

<!-- ::: {.card} -->
<!-- Sandra L. Frankel Nature Park (Brickyard Trail) -->
<!-- `r print("Brickyard Trail")` -->
<!-- ::: -->

```{r}
# value_box(
#   title = "",
#   value = textOutput("ss"),
#   showcase = bs_icon("geo-alt"),
#   color = "primary"
# )
```

```{r}
value_box(
  title = "Total Species",
  value = textOutput("total_species_text"),
  showcase = bs_icon("feather"),
  theme = "primary",
  full_screen = FALSE
)
```

```{r}
value_box(
  title = "Total Checklists",
  value = textOutput("total_checklists_text"),
  showcase = bs_icon("list-check"),
  theme = "primary",
  full_screen = FALSE
)
```

```{r}
value_box(
  title = "Total Time",
  value = textOutput("total_time_text"),
  showcase = bs_icon("stopwatch"),
  theme = "primary",
  full_screen = FALSE
)
```


```{r}
value_box(
  title = "Last Trip",
  value = textOutput("last_trip_text"),
  showcase = bs_icon("calendar-event"),
  theme = "success",
  full_screen = FALSE
)
```


```{r}
# #| content: valuebox
# #| title: "Total Species"
# #| icon: feather
# #| color: primary
# list(
#   value = textOutput("total_species_text"),
#   icon = "feather",
#   color = "primary"
# )
```

```{r}
# #| content: valuebox
# #| title: "Total Checklists"
# list(
#   value = total_checklists,
#   icon = "list-check",
#   color = "secondary"
# )
```

```{r}
# #| content: valuebox
# #| title: "Last Trip"
# list(
#   value = "03/19/25",
#   icon = "calendar-event",
#   color = "success"
# )
```

## Row {height=60%, .flow}

::: {layout="[[1, 1]]"}
```{r}
#| title: "A plot"
#| fig-height: 8
iris %>% 
  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + 
  geom_point()
# ggplot(data, aes(x = date, y = value1)) +
#   geom_line(color = "#007bff") +
#   geom_smooth(method = "loess", se = FALSE, color = "#6c757d") +
#   theme_minimal() +
#   labs(x = "Date", y = "Value") +
#   theme(legend.position = "none")
```

```{r}
#| title: "Map"
leafletOutput("hotspot_map")
```
:::

## Row {height=30%, .flow}

### Observations

```{r}
#| title: "Observations"

DT::dataTableOutput("data_preview")
# gt(observations) %>%
#   tab_header(
#     title = "Key Observations"
#   ) %>%
#   tab_style(
#     style = list(
#       cell_fill(color = "#f8f9fa"),
#       cell_text(weight = "bold")
#     ),
#     locations = cells_column_labels()
#   ) %>%
#   data_color(
#     columns = Significance,
#     colors = scales::col_factor(
#       palette = c("#28a745", "#ffc107", "#dc3545"),
#       domain = c("Low", "Medium", "High")
#     )
#   )
```