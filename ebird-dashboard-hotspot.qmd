---
title: "eBird Hotspot Dashboard"
author: "Anne Pier Salverda"
format: 
  dashboard:
    orientation: columns
    theme: cosmo
    css: styles.css
    scrolling: true
    sidebar:
      style: "docked"
      background: "light"
      collapse-level: 1
      width: 250px
      align: left
      tools:
        - icon: sliders
          menu:
            - text: "Settings"
              icon: gear
            - text: "Profile"
              icon: person
        - icon: question-circle
          href: "#"
server: shiny
---

```{r setup}
#| include: false
library(tidyverse)
library(ggplot2)
library(gt)
library(plotly)
library(shiny)
library(bslib)
library(bsicons)
library(leaflet)
library(ggiraph)

ordinal_date_suffix = function(date_str, year = TRUE, markdown_subscript = FALSE) {
  date_obj = as.Date(date_str, "%Y-%m-%d")
  day_suffix = c("st", "nd", "rd", rep("th", 17), "st", "nd", "rd", rep("th", 7), "st")
  if (markdown_subscript == TRUE){ day_suffix = paste0("^", day_suffix, "^") }
  formatted_date = paste0(
    month(date_obj, label = TRUE, abbr = FALSE),
    " ",
    day(date_obj), 
    day_suffix[day(date_obj)],
    ifelse(year == TRUE, paste0(
      " ",
      year(date_obj)
    ),
    ""
    )
  )
  return(formatted_date)
}
# # read ebird data
# ebird_csv = read_csv(
#   "MyEBirdData.csv",
#   col_types = cols(
#     `Submission ID` = col_character(),
#     `Common Name` = col_character(),
#     `Scientific Name` = col_character(),
#     `Taxonomic Order` = col_double(),
#     Count = col_character(), #!
#     `State/Province` = col_character(),
#     County = col_character(),
#     `Location ID` = col_character(),
#     Location = col_character(),
#     Latitude = col_double(),
#     Longitude = col_double(),
#     Date = col_date(format = ""),
#     Time = col_time(format = ""),
#     Protocol = col_character(),
#     `Duration (Min)` = col_double(),
#     `All Obs Reported` = col_double(),
#     `Distance Traveled (km)` = col_double(),
#     `Area Covered (ha)` = col_logical(),
#     `Number of Observers` = col_double(),
#     `Breeding Code` = col_character(),
#     `Observation Details` = col_character(),
#     `Checklist Comments` = col_character(),
#     `ML Catalog Numbers` = col_character()
#   ),
#   na = c("")
# )
# # NOTE: parsing issues can be ignored; are due to empty values not being
# #       included in the data when they occur on the "right end":
# #       problems(ebird_csv) %>%
# #       count(expected, actual)
# 
# # reorganize and reformat data
# dat =
#   ebird_csv %>%
#   janitor::clean_names() %>%
#   select(submission_id, date, everything()) %>%
#   arrange(date, time) %>%
#   mutate(
#     year = factor(year(date)),
#     month = month(date),
#     day_of_year = yday(date),
#     us_season = case_when(
#       month < 3 | month == 12~ "winter",
#       month < 6 ~ "spring",
#       month < 9 ~ "summer",
#       month < 12 ~ "fall",
#       TRUE ~ NA
#     ),
#     us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
#     month = factor(month(date, label = TRUE)),
#     # convert "X" to -1 so count can be stored as an integer
#     count = as.numeric(ifelse(count == "X", "-1", count))
#   )
# earliest_date = min(ebird_csv$Date)
# latest_date = max(ebird_csv$Date)
# #total_species = nrow(dat %>% distinct(common_name))
# total_checklists = nrow(dat %>% distinct(submission_id))
# hotspot_values =
#   dat %>% 
#   distinct(location, submission_id) %>% 
#   count(location, sort = TRUE) %>%
#   pull(location)
```

```{r}
#| context: server
reactive_hotspot_values = reactiveVal(list(NULL))
earliest_date = reactiveVal()
latest_date = reactiveVal()

ebird_dat = reactiveVal({
  read_csv("MyEBirdData.csv",
           col_types = cols(
             `Submission ID` = col_character(),
             `Common Name` = col_character(),
             `Scientific Name` = col_character(),
             `Taxonomic Order` = col_double(),
             Count = col_character(), #!
             `State/Province` = col_character(),
             County = col_character(),
             `Location ID` = col_character(),
             Location = col_character(),
             Latitude = col_double(),
             Longitude = col_double(),
             Date = col_date(format = ""),
             Time = col_time(format = ""),
             Protocol = col_character(),
             `Duration (Min)` = col_double(),
             `All Obs Reported` = col_double(),
             `Distance Traveled (km)` = col_double(),
             `Area Covered (ha)` = col_logical(),
             `Number of Observers` = col_double(),
             `Breeding Code` = col_character(),
             `Observation Details` = col_character(),
             `Checklist Comments` = col_character(),
             `ML Catalog Numbers` = col_character()
           ),
           na = c("")
  ) %>% 
    janitor::clean_names() %>%
    select(submission_id, date, everything()) %>%
    arrange(date, time) %>%
    mutate(
      year = factor(year(date)),
      month = month(date),
      day_of_year = yday(date),
      us_season = case_when(
        month < 3 | month == 12~ "winter",
        month < 6 ~ "spring",
        month < 9 ~ "summer",
        month < 12 ~ "fall",
        TRUE ~ NA
      ),
      us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
      month = factor(month(date, label = TRUE)),
      # convert "X" to -1 so count can be stored as an integer
      count = as.numeric(ifelse(count == "X", "-1", count))
    )
})

imported_dat = reactive({
  req(input$upload)
  # if (is.null(input$upload)){
  #   imported_dat =
  #     read_csv("MyEBirdData.csv",
  #              col_types = cols(
  #                `Submission ID` = col_character(),
  #                `Common Name` = col_character(),
  #                `Scientific Name` = col_character(),
  #                `Taxonomic Order` = col_double(),
  #                Count = col_character(), #!
  #                `State/Province` = col_character(),
  #                County = col_character(),
  #                `Location ID` = col_character(),
  #                Location = col_character(),
  #                Latitude = col_double(),
  #                Longitude = col_double(),
  #                Date = col_date(format = ""),
  #                Time = col_time(format = ""),
  #                Protocol = col_character(),
  #                `Duration (Min)` = col_double(),
  #                `All Obs Reported` = col_double(),
  #                `Distance Traveled (km)` = col_double(),
  #                `Area Covered (ha)` = col_logical(),
  #                `Number of Observers` = col_double(),
  #                `Breeding Code` = col_character(),
  #                `Observation Details` = col_character(),
  #                `Checklist Comments` = col_character(),
  #                `ML Catalog Numbers` = col_character()
  #              ),
  #              na = c("")
  #     )
  # } else {
  imported_dat =
    read_csv(input$upload$datapath,
             col_types = cols(
               `Submission ID` = col_character(),
               `Common Name` = col_character(),
               `Scientific Name` = col_character(),
               `Taxonomic Order` = col_double(),
               Count = col_character(), #!
               `State/Province` = col_character(),
               County = col_character(),
               `Location ID` = col_character(),
               Location = col_character(),
               Latitude = col_double(),
               Longitude = col_double(),
               Date = col_date(format = ""),
               Time = col_time(format = ""),
               Protocol = col_character(),
               `Duration (Min)` = col_double(),
               `All Obs Reported` = col_double(),
               `Distance Traveled (km)` = col_double(),
               `Area Covered (ha)` = col_logical(),
               `Number of Observers` = col_double(),
               `Breeding Code` = col_character(),
               `Observation Details` = col_character(),
               `Checklist Comments` = col_character(),
               `ML Catalog Numbers` = col_character()
             ),
             na = c("")
    ) %>% 
    janitor::clean_names() %>%
    select(submission_id, date, everything()) %>%
    arrange(date, time) %>%
    mutate(
      year = factor(year(date)),
      month = month(date),
      day_of_year = yday(date),
      us_season = case_when(
        month < 3 | month == 12~ "winter",
        month < 6 ~ "spring",
        month < 9 ~ "summer",
        month < 12 ~ "fall",
        TRUE ~ NA
      ),
      us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
      month = factor(month(date, label = TRUE)),
      # convert "X" to -1 so count can be stored as an integer
      count = as.numeric(ifelse(count == "X", "-1", count))
    )
})

observe({
  # triggered in response to the user uploading a file
  if (!is.null(input$upload)) {
    imported_dat =
      read_csv(input$upload$datapath,
               col_types = cols(
                 `Submission ID` = col_character(),
                 `Common Name` = col_character(),
                 `Scientific Name` = col_character(),
                 `Taxonomic Order` = col_double(),
                 Count = col_character(), #!
                 `State/Province` = col_character(),
                 County = col_character(),
                 `Location ID` = col_character(),
                 Location = col_character(),
                 Latitude = col_double(),
                 Longitude = col_double(),
                 Date = col_date(format = ""),
                 Time = col_time(format = ""),
                 Protocol = col_character(),
                 `Duration (Min)` = col_double(),
                 `All Obs Reported` = col_double(),
                 `Distance Traveled (km)` = col_double(),
                 `Area Covered (ha)` = col_logical(),
                 `Number of Observers` = col_double(),
                 `Breeding Code` = col_character(),
                 `Observation Details` = col_character(),
                 `Checklist Comments` = col_character(),
                 `ML Catalog Numbers` = col_character()
               ),
               na = c("")
      ) %>% 
      janitor::clean_names() %>%
      select(submission_id, date, everything()) %>%
      arrange(date, time) %>%
      mutate(
        year = factor(year(date)),
        month = month(date),
        day_of_year = yday(date),
        us_season = case_when(
          month < 3 | month == 12~ "winter",
          month < 6 ~ "spring",
          month < 9 ~ "summer",
          month < 12 ~ "fall",
          TRUE ~ NA
        ),
        us_season = factor(us_season, levels = c("spring", "summer", "fall", "winter")),
        month = factor(month(date, label = TRUE)),
        # convert "X" to -1 so count can be stored as an integer
        count = as.numeric(ifelse(count == "X", "-1", count))
      )
    ebird_dat(imported_dat)
    earliest_date(min(imported_dat$date))
    latest_date(max(imported_dat$date))
  }
})

selected_dat = reactive({
  req(input$hotspot)
  selected_dat = 
    ebird_dat() %>% 
    filter(
      location == input$hotspot
    )
  earliest_date(min(selected_dat$date))
  latest_date(max(selected_dat$date))
  selected_dat = selected_dat %>%
    filter(
      date >= input$date_range[1],
      date <= input$date_range[2]
    )
  return(selected_dat)
})

total_species = reactive({
  selected_dat() %>% distinct(common_name) %>% nrow()
})
output$total_species_text = renderText({
  total_species()
}
)

total_checklists = reactive({
  selected_dat() %>% distinct(submission_id) %>% nrow()
})
output$total_checklists_text = renderText({
  total_checklists()
}
)

total_time = reactive({
  selected_dat() %>% 
    distinct(submission_id, duration_min) %>% 
    filter(!is.na(duration_min)) %>%
    summarize(total_time_hours = sum(duration_min) / 60) %>% 
    pull(total_time_hours) %>% 
    round(1)
})
output$total_time_text = renderText({
  total_time()
  #  paste(total_time(), " hours")
}
)

last_trip = reactive({
  max_date = max(selected_dat()$date)
  paste(
    month(max_date, label = TRUE),
    " ",
    mday(max_date),
    ", ",
    year(max_date)
  )
})
output$last_trip_text = renderText({
  last_trip()
}
)

max_species = reactive({
  selected_dat() %>% 
    count(submission_id) %>%
    arrange(desc(n)) %>% 
    slice(1) %>% 
    pull(n)
})

output$max_species_text = renderText({
  max_species()
})

output$imported_data_text = renderText({
  paste0(
    "Imported ",
    imported_dat() %>% nrow(),
    " rows of data."
  )
})

output$species_count_plot = renderGirafe({
  plot = 
    selected_dat() %>% 
    count(submission_id, date) %>% 
    mutate(
      my_label = paste(
        n,
        "species on ", 
        ordinal_date_suffix(date)
      )
    ) %>% 
    ggplot(aes(x = date, y = n)) + 
    geom_point_interactive(
      shape = 16,
      aes(
        tooltip = my_label,
        data_id = submission_id,
        tooltip_fill = date,
        onclick = sprintf("window.open(\"https://ebird.org/checklist/%s\")", submission_id)
      )
    ) +
    labs(
      x = "",
      y = "Total species reported"
    )
  girafe(ggobj = plot, pointsize = 20) %>% 
    girafe_options(
      opts_sizing(rescale = FALSE, width = 1),
      options = list(
        opts_tooltip(
          use_fill = TRUE,
          #    opacity = .65,
          offx = 10,
          offy = 0
          #    use_fill = TRUE,
          #    css = "color:blue; background-color:red, fill-opacity:.5;"
          #    tooltip_fill = "white"
        ),
        #  opts_hover(css = "stroke:yellow;stroke-width:3px;fill-opacity:0.8;")
        opts_hover(
          css = "stroke:black; stroke-width:1px;"
        ),
        opts_toolbar(
          fixed = TRUE,
          #    position = "bottomright",
          pngname = "ebird-species-accumulation-curve.png"
        )
      )
    )
})

output$data_preview <- DT::renderDataTable({
  DT::datatable(
    selected_dat() %>% 
      group_by(common_name) %>% 
      summarize(first_seen = min(date), last_seen = max(date)) %>% 
      rename(
        "Common name" = common_name,
        "First seen" = first_seen,
        "Last seen" = last_seen
      )
    ,
    # select(
    #   date,
    #   common_name,
    #   count,
    #   #        protocol,
    #   us_season
    # ),
    options = list(
      pageLength = 10#,
      #      scrollX = TRUE,
      #      autoWidth = TRUE
    )#,
    # caption = htmltools::tags$caption(
    #   style = 'caption-side: top; text-align: center; font-size: 16px; font-weight: bold;',
    #   paste('Data from', input$dataset, 'filtered by', input$column, '=', input$filter_value)
    # )
  )
})

output$hotspot_map = renderLeaflet({
  top_location_info =
    selected_dat() %>% 
    distinct(location, latitude, longitude)
  leaflet() %>%
    addTiles(
      urlTemplate = "https://mts1.google.com/vt/lyrs=s&hl=en&src=app&x={x}&y={y}&z={z}&s=G",
      attribution = "Google"
    ) %>%
    # addControl(position = "topright") %>% 
    # addTiles() %>%  # Add default OpenStreetMap map tiles
    addMarkers(
      lng = top_location_info$longitude, 
      lat = top_location_info$latitude, 
      popup = top_location_info$location
    )
})

# observeEvent(
#   c(input$date_range),
#   {
#     @
#   }
# )

observeEvent(
  c(input$dataset, input$upload),
  { 
    if (input$dataset == "alphabetically"){
      hotspot_list = 
        ebird_dat() %>% 
        distinct(location) %>% 
        arrange(location)
      if (any(str_detect(hotspot_list$location, "^[0-9]"))){
      }
      # move hotspots whose name starts with a number to the bottom of the list
      # these names tend to be very long
      hotspot_list = 
        bind_rows(
          hotspot_list %>% 
            filter(!str_detect(location, "^[0-9]")),
          hotspot_list %>% 
            filter(str_detect(location, "^[0-9]"))
        )
      hotspot_list = hotspot_list %>% pull()
    } else
    {
      hotspot_list =
        ebird_dat() %>%
        distinct(location, submission_id) %>% 
        count(location, sort = TRUE) %>%
        pull(location)
    }
    reactive_hotspot_values(hotspot_list)
    earliest_date(min(ebird_dat()$date))
    latest_date(max(ebird_dat()$date))
    updateSelectInput(
      session,
      "hotspot",
      choices = reactive_hotspot_values(),
      selected = NULL
    )
    updateSliderInput(
      session,
      "dateRange",
      min = earliest_date(),
      max = latest_date(),
      value = c(earliest_date(), latest_date())
    )
    updateDateRangeInput(
      session,
      "date_range",
      start = earliest_date(),
      end = latest_date(),
      min = earliest_date(),
      max = latest_date()
    )
  })
```

# Sidebar {.sidebar}

```{r}
#| title: "Filters"

selectInput(
  "hotspot", 
  "Select a hotspot:",
  choices = NULL,
  selected = NULL
)

selectInput(
  "dataset", 
  "Hotspot list sorting:",
  choices = list("checklist count", "alphabetically")
)

dateRangeInput("date_range", "Date range:",
               start  = "2001-01-01",
               end    = "2010-12-31",
               min    = "2001-01-01",
               max    = "2012-12-21",
               format = "mm/dd/yy",
               separator = " - ")

# sliderInput("dateRange", "Date Range:",
#             min = as.Date("2025-01-01"),
#             max = as.Date("2025-03-01"),
#             value = c(as.Date("2025-01-01"), as.Date("2025-03-01")),
#             timeFormat = "%b %Y")

# selectInput("category", "Category:",
#             c("All Categories" = "all",
#               "Category A" = "a",
#               "Category B" = "b",
#               "Category C" = "c"))
# 
# checkboxGroupInput("metrics", "Metrics to Display:",
#                    c("Value 1" = "value1",
#                      "Value 2" = "value2",
#                      "Value 3" = "value3"),
#                    selected = c("value1", "value2", "value3"))

# actionButton("updateBtn", "Update Dashboard", 
#              class = "btn-primary w-100 mb-3")

hr()

fileInput(
  "upload",
  "Import eBird data",
  accept = ".csv",
  multiple = FALSE
)

textOutput("imported_data_text")

leafletOutput("hotspot_map")

# div(
#   h4("Dashboard Info"),
#   p("Last updated: March 19, 2025")
# )
```

# Hotspot {orientation="rows"}

## Row {height=10%}

<!-- ::: {.card} -->
<!-- Sandra L. Frankel Nature Park (Brickyard Trail) -->
<!-- `r print("Brickyard Trail")` -->
<!-- ::: -->

```{r}
# value_box(
#   title = "",
#   value = textOutput("ss"),
#   showcase = bs_icon("geo-alt"),
#   color = "primary"
# )
```

```{r}
box1 = value_box(
  title = "Species",
  value = textOutput("total_species_text"),
  showcase = bs_icon("feather"),
  theme = "primary",
  full_screen = FALSE,
  height = .9
)
box2 = value_box(
  title = "Checklists",
  value = textOutput("total_checklists_text"),
  showcase = bs_icon("list-check"),
  theme = "primary",
  full_screen = FALSE
)
box3 = value_box(
  title = "Hours",
  value = textOutput("total_time_text"),
  showcase = bs_icon("stopwatch"),
  theme = "primary",
  full_screen = FALSE
)
box4 = value_box(
  title = "Max checklist species",
  value = textOutput("max_species_text"),
  showcase = bs_icon("trophy"),
  theme = "success",
  full_screen = FALSE
)
# box4 = value_box(
#   title = "Last Trip",
#   value = textOutput("last_trip_text"),
#   showcase = bs_icon("calendar-event"),
#   theme = "success",
#   full_screen = FALSE
#   #    style = "height: 100px; resize: both"
# )
layout_columns(
  col_widths = c(3, 3, 3, 3),
  box1,
  box2,
  box3,
  box4
)


# value_boxes = list(
#   value_box(
#     title = "Species",
#     value = textOutput("total_species_text"),
#     showcase = bs_icon("feather"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Checklists",
#     value = textOutput("total_checklists_text"),
#     showcase = bs_icon("list-check"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Hours",
#     value = textOutput("total_time_text"),
#     showcase = bs_icon("stopwatch"),
#     theme = "primary",
#     full_screen = FALSE
#   ),
#   value_box(
#     title = "Last Trip",
#     value = textOutput("last_trip_text", container = h4),
#     showcase = bs_icon("calendar-event"),
#     theme = "success",
#     full_screen = FALSE
# #    style = "height: 100px; resize: both"
#   )
# )
# layout_column_wrap(
# #  height = "150px",
#   width_default = "100%",
#   width = c("25%", "25%", "25%", "25%"),
#   !!!value_boxes
# )
```

```{r}
# #| content: valuebox
# #| title: "Total Species"
# #| icon: feather
# #| color: primary
# list(
#   value = textOutput("total_species_text"),
#   icon = "feather",
#   color = "primary"
# )
```

```{r}
# #| content: valuebox
# #| title: "Total Checklists"
# list(
#   value = total_checklists,
#   icon = "list-check",
#   color = "secondary"
# )
```

```{r}
# #| content: valuebox
# #| title: "Last Trip"
# list(
#   value = "03/19/25",
#   icon = "calendar-event",
#   color = "success"
# )
```

## Row {height=60%, .flow}

::: {layout="[[1, 1]]"}
```{r}
#| title: ""
##| fig-height: 8
##| fig-width: 12
girafeOutput("species_count_plot")
# iris %>% 
#   ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + 
#   geom_point()
# ggplot(data, aes(x = date, y = value1)) +
#   geom_line(color = "#007bff") +
#   geom_smooth(method = "loess", se = FALSE, color = "#6c757d") +
#   theme_minimal() +
#   labs(x = "Date", y = "Value") +
#   theme(legend.position = "none")
```

```{r}
# #| title: "Map"
# leafletOutput("hotspot_map")
```
:::

## Row {height=30%, .flow}

### Observations

```{r}
#| title: "Observations"

DT::dataTableOutput("data_preview")
# gt(observations) %>%
#   tab_header(
#     title = "Key Observations"
#   ) %>%
#   tab_style(
#     style = list(
#       cell_fill(color = "#f8f9fa"),
#       cell_text(weight = "bold")
#     ),
#     locations = cells_column_labels()
#   ) %>%
#   data_color(
#     columns = Significance,
#     colors = scales::col_factor(
#       palette = c("#28a745", "#ffc107", "#dc3545"),
#       domain = c("Low", "Medium", "High")
#     )
#   )
```